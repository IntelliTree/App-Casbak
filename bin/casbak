#! /usr/bin/env perl
#
# Casbak main script.
#
# This is a simple wrapper around App::Casbak::Cmd.
# See that package for details and usage. (or use --help)
#
# Exit codes:
#  0 - successful operation
#  1 - no error, but no operation performed (but see --allow-noop)
#  2 - fatal error in usage or parameters
#  3 - fatal error in execution
#
# All *diagnostic* output of this command is on STDERR, including status messages
# about the progress of a backup.
#
# You will only see data on STDOUT if you request specific output, like with
#  --help, --version, or commands like 'log' or 'ls'.

use strict;
use warnings;
use Try::Tiny;
use App::Casbak;
use App::Casbak::Cmd;

my $cmd;

sub pod2usage {
	# lazy-load this module
	require Pod::Usage;
	
	# Get the POD text from whichever command we're running
	my $pod= $cmd->getHelpPOD();
	open my $stream, '<', \$pod;
	
	Pod::Usage::pod2usage(-input => $stream, @_);
}

$cmd= App::Casbak::Cmd->new;

try {
	# This command object will re-bless itself into a subclass of App::Casbak::Cmd
	#  based on which sub-command the user specified, which gives us appropriate
	#  help text in case of errors.
	$cmd->applyArguments(@ARGV);
}
catch {
	# Exceptions during 'applyArguments' indicate invalid arguments
	my $err= "$_";
	pod2usage(-message => $err, -exitcode => 2);
};

# App::Casbak has globally-defined logging functions, and we enable/disable them
#  with this class method.
App::Casbak->SetLogLevel($cmd->verbosity);

# When trace is enabled, dump the complete internal structure of the command object
App::Casbak::Trace($cmd);

# They specified '--version'. Print it and exit.
if ($cmd->wantVersion) {
	print App::Casbak->VersionMessage();
	exit($cmd->allowNoop? 0 : 1);
}

# They specified '--help'.  Print the full POD and exit.
if ($cmd->wantHelp) {
	pod2usage(-verbose => 2, -exitcode => ($cmd->allowNoop? 0 : 1));
}

# Try running the command.  Exceptons are printed as-is, but we also want to exit with 3.
try {
	$cmd->run();
}
catch {
	print STDERR "$_\n"
	exit 3;
};
exit 0;
