#! /usr/bin/env perl
#
# Casbak main script.
#
# This is a simple wrapper around App::Casbak::Cmd.
# See that package for details and usage. (or use --help)
#
# Exit codes:
#  0 - successful operation
#  1 - no error, but no operation performed (but see --allow-noop)
#  2 - fatal error in usage or parameters
#  3 - fatal error in execution
#
# All *diagnostic* output of this command is on STDERR, including status messages
# about the progress of a backup.
#
# You will only see data on STDOUT if you request specific output, like with
#  --help, --version, or commands like 'log' or 'ls'.

use strict;
use warnings;
use Try::Tiny;
use App::Casbak::Cmd;
use Log::Any '$log';
require Log::Any::Adapter;
require Getopt::Long;

my $log_filter= -(defined $ENV{CASBAK_DEBUG}? $ENV{CASBAK_DEBUG} + 1 : 0);
Log::Any::Adapter->set('+App::Casbak::Logger', _filter => $log_filter);

my ($cmd, $cmdclass, $params);
try {
	($cmdclass, $params)= App::Casbak::Cmd->parse_argv(\@ARGV);

	# Now that we've seen the --verbose/--quiet arguments, adjust our log level
	Log::Any::Adapter->set('+App::Casbak::Logger', _filter => $log_filter - $params->{verbosity})
		if defined $params->{verbosity};
	
	# If they gave --help or --version, don't try constructing the class
	if ($params->{want_help} || $params->{want_version}) {
		$cmd= $cmdclass;
	}
	else {
		# Create command object
		$cmd= $cmdclass->new($params);
		# When trace is enabled, dump the complete internal structure of the command object
		$log->trace($cmd);
	}
}
# Exceptions during constructor indicate invalid arguments
catch {
	if (ref $_ && ref($_)->can('pod_source')) {
		require Pod::Usage;
		Pod::Usage::pod2usage(-message => $_->message, -input => $_->pod_source, -exitcode => 2);
	}
	exit_exception($_, 2);
};

my %StatusCodes= (
	'success' => 0,
	'no-op'   => 1,
);

try {
	my $status= $params->{want_version}? $cmdclass->show_version()
		: $params->{want_help}? $cmdclass->show_help($params->{want_help} > 1)
		: $cmd->run();
	die "Command returned invalid exit code: '$status'"
		unless defined $StatusCodes{$status};
	
	$status= 'success'
		if $status eq 'no-op' && $params->{allow_no_op};

	exit $StatusCodes{$status};
}
catch {
	exit_exception($_, 3);
};

sub exit_exception {
	my ($exception, $exit_code)= @_;
	my $log_level= ref $exception && ref($exception)->can('log_level')? $exception->log_level : 'fatal';
	my $message= ref $exception && ref($exception)->can('message')? $exception->message : do { my $x; chomp($x= "$_"); $x };
	$log->$log_level($message);

	$exit_code= $exception->exit_code
		if ref $exception && ref($exception)->can('exit-code');
	exit $exit_code;
}
